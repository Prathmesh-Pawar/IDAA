•	Insertion Sort : 
Time Complexity : O(n2)   Space Complexity : O(1)
Input : Size of the Array and the elements
Output : All iterative steps in the process of sorting
CODE : 
#include<bits/stdc++.h>
using namespace std;
void insertionSort(int arr[], int n){
    int key, j;
    for(int i=1; i<n; i++){
        key=arr[i];
        j=i-1;
        while(j>=0 && arr[j]>key){
            arr[j+1]=arr[j];
            j=j-1;
        }
        arr[j+1]=key;
        cout<<"Key : "<<key<<endl;
        for(int i=0; i<n; i++)
            cout<<arr[i]<<" ";
        cout<<endl;
    }
}
int main(){
    int n;
    cout<<"Enter size : ";
    cin>>n;
    int arr[n];
    cout<<"Enter elements : ";
    for(int i=0; i<n; i++)
        cin>>arr[i];
    insertionSort(arr, n);
    cout<<"Sorted array is : ";
    for(int i=0; i<n; i++)
        cout<<arr[i]<<"\t";
    return 0;
}







 
•	Quick Sort : 
Time Complexity : Best Case and Average Case : O(nlog(n))
		    	   Worst Case : O(n2)
Space Complexity : O(nlog(n))
Input : Size of the Array and the elements
Output : All iterative steps in the process of sorting
CODE : 
#include<bits/stdc++.h>
using namespace std;
int partition(int arr[], int low, int high){
    int pivot=arr[low];
    int i=low, j=high;
    while(i<j){
        do{
            i++;
        }while(arr[i]<=pivot);
        do{
            j--;
        }while(arr[j]>pivot);
        if(i<j)
            swap(arr[i], arr[j]);
    }
    swap(arr[low], arr[j]);
    return j;
}
void quickSort(int arr[], int l, int h, int n){
    if(l<h){
        int pivot=partition(arr, l, h);
        cout<<"\nUpdated Array: ";
        for(int i=0;i<n;i++){
            if(i==pivot)
                cout<<"   "<<arr[i]<<"    ";
            else
                cout<<arr[i]<<" ";
        }
        quickSort(arr, l, pivot, n);
        quickSort(arr, pivot+1, h, n);
    }
}
int main(){
    int n, l, r;
    cout<<"Enter size : ";
    cin>>n;
    cout<<"Enter first and last index of the subarray to be sorted : ";
    cin>>l>>r;
    int arr[n];
    cout<<"Enter elements : ";
    for(int i=0; i<n; i++)
        cin>>arr[i];
    quickSort(arr, l, r, n);
    cout<<endl;
    for(int i=0; i<n; i++)
        cout<<arr[i]<<"\t";
    return 0;
}

 

•	Merge Sort :
Time Complexity : O(nlog(n))   Space Complexity : O(n)
Input : Size of the array and the array elements
Output : All iterations in sorting process
CODE : 
#include<bits/stdc++.h>
using namespace std;
int h=1;
void merge(int arr[], int low, int high, int mid, int size){
    mid=(low+high)/2;
    int n1=mid-low+1;
    int n2=high-mid;
    int arr1[n1], arr2[n2];
    for(int i=low,j=0; i<=mid; i++,j++){
        arr1[j]=arr[i];
    }
    for(int i=mid+1,j=0; i<=high; i++,j++){
        arr2[j]=arr[i];
    }
    int i=0, j=0, k=low;
    while(i<n1 && j<n2){
        if(arr1[i]<arr2[j]){
            arr[k]=arr1[i];
            i++;
            k++;
        }
        else{
            arr[k]=arr2[j];
            j++;
            k++;
        }
    }
    while(i<n1){
        arr[k]=arr1[i];
        i++;
        k++;
    }
    while(j<n2){
        arr[k]=arr2[j];
        j++;
        k++;
    }
    cout<<"Iteration "<<h++<<" : \tLow-> "<<low<<" High-> "<<high<<endl;
    for(int i=0; i<size; i++){
        if(i==low) cout<<" (- ";
        cout<<arr[i] << " ";
        if(i==high)  cout<<"-)  ";
    }
    cout<<endl;
}
void mergeSort(int arr[], int low, int high, int size){
    int mid=(low+high)/2;
    if(low<high){
        mergeSort(arr, low, mid, size);
        mergeSort(arr, mid+1, high, size);
        merge(arr, low, high, mid, size);
    }
}
int main(){
    int n, l, r;
    cout<<"Enter size : ";
    cin>>n;
    cout<<"Enter first and last index of the subarray to be sorted : ";
    cin>>l>>r;
    int arr[n];
    cout<<"Enter elements : ";
    for(int i=0; i<n; i++)
        cin>>arr[i];
    mergeSort(arr, l, r, n);
    cout<<endl;
    for(int i=0; i<n; i++)
        cout<<arr[i]<<"  ";
    return 0;
}

 
  
•	Selection Sort : 
Time Complexity : O(n2)   Space Complexity : O(1)
Input : Size of the Array
Output : Steps After each iteration of swapping and the final sorted array.
CODE : 
#include<bits/stdc++.h>
using namespace std;
void printArray(int arr[], int n){
    for(int i=0; i<n; i++)
        cout<<arr[i]<<"    ";
    cout<<endl;
}
void selectionSort(int arr[], int n){
    int j=0;
    while(j<n){
        for(int i=j+1; i<n; i++){
            if(arr[i]<arr[j]){
                swap(arr[i], arr[j]);
            }
        }
        j++;
        printArray(arr, n);
    }
}
int main(){
    int n;
    cout<<"Enter size : ";
    cin>>n;
    int arr[n];
    cout<<"Enter Elements : ";
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    selectionSort(arr, n);
    cout<<"Sorted Array : ";
    printArray(arr, n);
    return 0;
}
 
•	Heap Sort : 
Time Complexity : O(nlog(n))   Space Complexity : O(1)
Input : Size of the array as well as array Elements
Output : All iterations in sorting process and the final Sorted Array
CODE : 
#include<bits/stdc++.h>
using namespace std;
void printArray(int arr[], int n){
    for (int i=0; i<n; i++)
        cout<<arr[i]<<" ";
    cout<<endl;
}
 
void Heapify(int arr[], int n, int i){
    int largest=i;
    int left=2*i+1;
    int right=2*i+2;
    if(left<n && arr[left]>arr[largest])
        largest=left;
    if(right<n && arr[right]>arr[largest])
        largest=right;
    if(largest!=i){
        swap(arr[i], arr[largest]);
        Heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n){
    for(int i=n/2-1; i>=0; i--)
        Heapify(arr, n, i);
    for(int i=n-1; i>0; i--){
        swap(arr[0], arr[i]);
        Heapify(arr, i, 0);
        printArray(arr, n);
    }
}
int main(){
    int n;
    cout<<"Enter n : ";
    cin>>n;
    int arr[n];
    cout<<"Enter elements : ";
    for(int i=0; i<n; i++)
        cin>>arr[i];
    heapSort(arr, n);
    cout<<"Sorted array is \n";
    printArray(arr, n);
    return 0;
}
