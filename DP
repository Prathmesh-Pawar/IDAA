•	Activity Selection Problem : 
CODE : 
#include <bits/stdc++.h>
using namespace std;
#define NUM_LINE 2 
#define NUM_STATION 4 
int min(int a, int b){ 
    return a < b ? a : b; 
}   
int carAssembly(int a[][NUM_STATION], int t[][NUM_STATION], int *e, int *x) { 
    int T1[NUM_STATION], T2[NUM_STATION], i; 
    T1[0]=e[0]+a[0][0]; 
    T2[0]=e[1]+a[1][0]; 
    for(i=1; i<NUM_STATION; ++i){ 
        T1[i]=min(T1[i - 1] + a[0][i], T2[i - 1] + t[1][i] + a[0][i]); 
        T2[i] = min(T2[i - 1] + a[1][i], T1[i - 1] + t[0][i] + a[1][i]); 
    }
    return min(T1[NUM_STATION - 1] + x[0], 
               T2[NUM_STATION - 1] + x[1]); 
} 
int main() { 
    int a[][NUM_STATION]={{4, 5, 3, 2}, 
                            {2, 10, 1, 4}}; 
    int t[][NUM_STATION]={{0, 7, 4, 5}, 
                            {0, 9, 2, 8}}; 
    int e[] = {10, 12}, x[] = {18, 7}; 
    cout << carAssembly(a, t, e, x); 
    return 0; 
} 

 
•	Longest Common Subsequence : 
Input : 2 Strings
Output : Length of the longest common subsequence generated
Time Complexity : O(m*n)
CODE : 
#include <bits/stdc++.h>
using namespace std;
int lcs(string X, string Y, int m, int n, vector<vector<int> >& dp){
    if(m == 0 || n == 0)
        return 0;
    if(X[m-1]==Y[n-1])
        return dp[m][n]=1+lcs(X, Y, m-1, n-1, dp);
 
    if(dp[m][n]!=-1){
        return dp[m][n];
    }
    return dp[m][n]=max(lcs(X, Y, m, n - 1, dp), lcs(X, Y, m - 1, n, dp));
}

int main(){
    string X, Y;
    cin>>X>>Y;
    int m=X.size();
    int n=Y.size();
    vector<vector<int>>dp(m + 1, vector<int>(n + 1, -1));
    cout<<"Length of LCS is "<<lcs(X, Y, m, n, dp);
    return 0;
}


 
•	0-1 Knapsack Problem : 
Input : Profit and Weight of each element
Output : Maximum Profit
Time Complexity : O(n*W)
CODE : 
#include <bits/stdc++.h>
using namespace std;
int max(int a, int b){
    return (a>b)?a:b;
}
int knapSack(int W, int wt[], int val[], int n){
    int i, w;
    vector<vector<int>> K(n + 1, vector<int>(W + 1));
    for(i=0; i<=n; i++){
        for(w=0; w<=W; w++){
            if(i==0 || w==0)
                K[i][w]=0;
            else if(wt[i-1]<=w)
                K[i][w]=max(val[i-1]+K[i-1][w-wt[i-1]], K[i-1][w]);
            else
                K[i][w]=K[i-1][w];
        }
    }
    return K[n][W];
}
int main(){
    int n;
    cout<<"Enter the number of Items : ";
    cin>>n;
    int val[n];
    int wt[n];
    cout<<"Enter the profit array : ";
    for(int i=0; i<n; i++){
        cin>>val[i];
    }
    cout<<"Enter the weight array : ";
    for(int i=0; i<n; i++){
        cin>>wt[i];
    }
    int W;
    cout<<"Enter the capacity of Knapsack : ";
    cin>>W;
    cout<<knapSack(W, wt, val, n);
    return 0;
}

 
•	Bellman-Ford Algorithm : 
Input : Structure of the graph, weights of each edge and a source vertex
Output : Shortest distance to all vertices from the source vertex.  If negative cycle appears, then shortest path is not calculated and negative weight cycle is reported.
Time Complexity : O(VE)
CODE : 
#include <bits/stdc++.h>
struct Edge {
    int src, dest, weight;
};
struct Graph {
    int V, E;
    struct Edge* edge;
};
struct Graph* createGraph(int V, int E){
    struct Graph* graph = new Graph;
    graph->V = V;
    graph->E = E;
    graph->edge = new Edge[E];
    return graph;
}
void printArr(int dist[], int n){
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < n; ++i)
        printf("%d \t\t %d\n", i, dist[i]);
}
void BellmanFord(struct Graph* graph, int src){
    int V = graph->V;
    int E = graph->E;
    int dist[V];
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[src] = 0;
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if (dist[u] != INT_MAX
                && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }
    for (int i = 0; i < E; i++) {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX
            && dist[u] + weight < dist[v]) {
            printf("Graph contains negative weight cycle");
            return;
        }
    }
    printArr(dist, V);
    return;
}
int main(){
    int V = 5;
    int E = 8;
    struct Graph* graph = createGraph(V, E);
    graph->edge[0].src = 0;
    graph->edge[0].dest = 1;
    graph->edge[0].weight = -1;
 
    graph->edge[1].src = 0;
    graph->edge[1].dest = 2;
    graph->edge[1].weight = 4;
 
    graph->edge[2].src = 1;
    graph->edge[2].dest = 2;
    graph->edge[2].weight = 3;
 
    graph->edge[3].src = 1;
    graph->edge[3].dest = 3;
    graph->edge[3].weight = 2;
 
    graph->edge[4].src = 1;
    graph->edge[4].dest = 4;
    graph->edge[4].weight = 2;
 
    graph->edge[5].src = 3;
    graph->edge[5].dest = 2;
    graph->edge[5].weight = 5;
 
    graph->edge[6].src = 3;
    graph->edge[6].dest = 1;
    graph->edge[6].weight = 1;
 
    graph->edge[7].src = 4;
    graph->edge[7].dest = 3;
    graph->edge[7].weight = -3;
 
    BellmanFord(graph, 0);
 
    return 0;
}

 

•	Optimal Binary Search Tree : 
Input : Number of different Characters and their Frequency
Output : Cost of Optimal BST
Time Complexity : O(n3)
CODE : 
#include <bits/stdc++.h>
using namespace std;
int sum(int freq[], int i, int j);
int optimalSearchTree(int keys[], int freq[], int n){
    int cost[n][n];
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];
    for (int L = 2; L <= n; L++){
        for (int i = 0; i <= n-L+1; i++){
            int j = i+L-1;
            cost[i][j] = INT_MAX;
            for(int r=i; r<=j; r++){
            int c=((r>i)?cost[i][r-1]:0)+((r<j)?cost[r+1][j]:0)+sum(freq, i, j);
            if(c<cost[i][j])
                cost[i][j]=c;
            }
        }
    }
    return cost[0][n-1];
}
int sum(int freq[], int i, int j){
    int s=0;
    for(int k = i; k <= j; k++)
        s+=freq[k];
    return s;
}
int main(){
    int n;
    cout<<"Enter the number of different characters : ";
    cin>>n;
    int keys[n];
    for(int i=0; i<n; i++)
        cin>>keys[i];
    int freq[n];
    for(int i=0; i<n; i++)
        cin>>freq[i];
    cout<<"Cost of Optimal BST is "<<optimalSearchTree(keys, freq, n);
    return 0;
}

 
•	Matrix Chain Multiplication : 
Input : Number of dimensions and their values
Output : The optimal cost to multiply the above matrices
Time Complexity : O(n3)
CODE : 
#include <bits/stdc++.h>
using namespace std;
int dp[100][100];
int matrixChainMemoised(int* p, int i, int j){
    if (i==j){
        return 0;
    }
    if (dp[i][j]!=-1){
        return dp[i][j];
    }
    dp[i][j]=INT_MAX;
    for (int k = i; k < j; k++){
        dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k)+matrixChainMemoised(p, k+1, j)+ p[i-1]*p[k]*p[j]);
    }
    return dp[i][j];
}
int MatrixChainOrder(int* p, int n){
    int i=1, j=n-1;
    return matrixChainMemoised(p, i, j);
}
int main(){
    int n;
    cout<<"Enter the number of Dimensions : ";
    cin>>n;
    int arr[n];
    cout<<"Enter Dimensions : ";
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    memset(dp, -1, sizeof dp);
    cout<<"Minimum number of multiplications is : "<<MatrixChainOrder(arr, n);
}
 
•	Floyd Warshall Algorithm : 
Input : Graph
Output : Minimum distance grapgh
Time Complexity : O(V3)
CODE : #include <bits/stdc++.h>
using namespace std;
#define V 4
#define INF 99999
void printSolution(int dist[][V]);
void floydWarshall(int graph[][V]){
    int dist[V][V], i, j, k;
    for(i=0; i<V; i++)
        for(j=0; j<V; j++)
            dist[i][j]=graph[i][j];
    for(k=0; k<V; k++) {
        for (i=0; i<V; i++){
            for (j=0; j<V; j++){
                if (dist[i][j] > (dist[i][k]+dist[k][j]) && (dist[k][j]!=INF && dist[i][k]!=INF))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
}
void printSolution(int dist[][V]){
    cout<<"The following matrix shows the shortest distances between every pair of vertices : "<<endl;
    for(int i=0; i<V; i++){
        for(int j=0; j<V; j++){
            if(dist[i][j]==INF)
                cout<<"INF"<<"     ";
            else
                cout<<dist[i][j]<<"     ";
        }
        cout<<endl;
    }
}
int main(){
    int graph[V][V]={ {0, 5, INF, 10 }, {INF, 0, 3, INF}, {INF, INF, 0, 1 }, {INF, INF, INF, 0 } };
    floydWarshall(graph);
    return 0;
}
